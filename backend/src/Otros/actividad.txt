import { prisma } from "../conexion.js";

export class ActividadModel {

   // Crear Actividad 
   static create = async (nombre, descripcion, fechaLimite, tipo, claveGrupo) => {
      const actividad = prisma.actividad.create({
         data: {
            Grupo: {
               connect: { clave: claveGrupo },
            },
            nombre: nombre,
            descripcion: descripcion,
            fechaLimite: new Date(fechaLimite),
            tipo: tipo,
         },
      });
      return actividad;
   }
   

   // Obtener las actividades 
   static async obtenerActividadesPorClaveGrupo(claveGrupo) {
      try {
          // Buscar el grupo por la clave
          const grupo = await prisma.grupo.findUnique({
              where: {
                  clave: claveGrupo,
              },
          });
  
          if (!grupo) {
              return null;
          }
  
          // Obtener todas las actividades del grupo
          const actividades = await prisma.actividad.findMany({
              where: {
                  grupoId: grupo.id,
              },
          });
  
          return actividades;
      } catch (error) {
          // Puedes manejar el error de alguna otra manera, como imprimir un mensaje de registro
          return null;
      }
  }

  static getByClave = async (claveGrupo) => {
   const grupo = await prisma.grupo.findUnique({
       where: { clave: claveGrupo },
   });
   return grupo;
}

   static getById = async (actividadId) => {
      const actividad = prisma.actividad.findUnique({
         where: { id: actividadId },
         include: {
            grupo: true,
            preguntasCuestionario: {
               include: {
                  OpcionCuestionario: true,
               },
            },
            preguntasEjercicio: {
               include: {
                  OpcionEjercicio: true,
               },
            },
            calificaciones: true,
         },
      });
      return actividad;
   }

   // Actualizar Actividad 
   static update = async (actividadId, nuevaInformacion) => {
      const actividadActualizada = prisma.actividad.update({
         where: { id: actividadId },
         data: {
            Grupo: {
               connect: { clave: nuevaInformacion.claveGrupo }, // Conectar por clave del grupo
            },
            nombre: nuevaInformacion.nombre,
            descripcion: nuevaInformacion.descripcion,
            fechaLimite: nuevaInformacion.fechaLimite,
            tipo: nuevaInformacion.tipo,
         },
         include: {
            grupo: true,
            preguntasCuestionario: {
               include: {
                  OpcionCuestionario: true,
               },
            },
            preguntasEjercicio: {
               include: {
                  OpcionEjercicio: true,
               },
            },
            calificaciones: true,
         },
      });
      return actividadActualizada;
   }

   // Eliminar Actividad 
   static delete = async (actividadId) => {
      const actividadEliminada = await prisma.actividad.delete({
         where: { id: actividadId },
      });
      return actividadEliminada;
   }
}





//Controller 

import { ActividadModel } from "../models/actividadModel.js";

export class ActividadController {
   // Crear una nueva actividad
   static async create(req, res) {
      try {
         const grupoId = parseInt(req.params.idGrupo);
         const { nombre, descripcion, fechaLimite, tipo, claveGrupo } = req.body;
         const actividad = await ActividadModel.create(grupoId, nombre, descripcion, fechaLimite, tipo, claveGrupo);
         res.json({ mensaje: 'Actividad creada con éxito', actividad });
      } catch (error) {
         console.error('Error al crear la actividad:', error);
         res.status(500).json({ mensaje: 'Error interno del servidor' });
      }
   }

   // Obtener todas las actividades de un grupo
    // Obtener todas las actividades de un grupo
    static async getAll(req, res) {
      try {
         const claveGrupo = req.params.claveGrupo; // Cambia aquí para obtener la clave del grupo
         const actividades = await ActividadModel.getAll(claveGrupo);
         res.json(actividades);
      } catch (error) {
         console.error('Error al obtener las actividades:', error);
         res.status(500).json({ mensaje: 'Error interno del servidor' });
      }
   }

   // Obtener una actividad específica por su ID
   static async getById(req, res) {
      try {
         const actividadId = parseInt(req.params.idActividad);
         const actividad = await ActividadModel.getById(actividadId);
         res.json(actividad);
      } catch (error) {
         console.error('Error al obtener la actividad:', error);
         res.status(500).json({ mensaje: 'Error interno del servidor' });
      }
   }

   // Actualizar una actividad existente
   static async update(req, res) {
      try {
         const actividadId = parseInt(req.params.idActividad);
         const { nombre, descripcion, fechaLimite, tipo } = req.body;
         const claveGrupo = req.body.claveGrupo; // Agregar aquí para obtener la clave del grupo
         
         const nuevaInformacion = {
            nombre,
            descripcion,
            fechaLimite,
            tipo,
            claveGrupo, // Agregar la clave del grupo
         };

         const actividadActualizada = await ActividadModel.update(actividadId, nuevaInformacion);
         res.json({ mensaje: 'Actividad actualizada con éxito', actividad: actividadActualizada });
      } catch (error) {
         console.error('Error al actualizar la actividad:', error);
         res.status(500).json({ mensaje: 'Error interno del servidor' });
      }
   }

   // Eliminar una actividad existente
   static async delete(req, res) {
      try {
         const actividadId = parseInt(req.params.idActividad);
         await ActividadModel.delete(actividadId);
         res.json({ mensaje: 'Actividad eliminada con éxito' });
      } catch (error) {
         console.error('Error al eliminar la actividad:', error);
         res.status(500).json({ mensaje: 'Error interno del servidor' });
      }
   }
}
