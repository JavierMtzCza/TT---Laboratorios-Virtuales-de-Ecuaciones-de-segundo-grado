generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Usuario {
    id               Int                     @id @default(autoincrement())
    nombre           String                  @db.VarChar(20)
    apellido_paterno String                  @db.VarChar(25)
    apellido_materno String                  @db.VarChar(25)
    correo           String                  @unique @db.VarChar(50)
    contrasena       String
    creadoEl         DateTime                @default(now())
    estado           Boolean                 @default(true)
    Grupos           UsuarioEnGrupo[]
    Respuestas       RespuestasAlumno[]
    Calificaciones   CalificacionActividad[]
}

model Rol {
    id          Int              @id @default(autoincrement())
    nombre      String           @unique
    rolEnGrupos UsuarioEnGrupo[]
}

model UsuarioEnGrupo {
    id        Int     @id @default(autoincrement())
    usuarioId Int
    grupoId   Int
    rolId     Int
    Usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
    Grupo     Grupo   @relation(fields: [grupoId], references: [id], onDelete: Cascade)
    Rol       Rol     @relation(fields: [rolId], references: [id])

    @@unique([usuarioId, grupoId])
}

model Grupo {
    id          Int              @id @default(autoincrement())
    nombre      String           @db.VarChar(50)
    descripcion String?
    clave       String           @unique
    creadoEl    DateTime         @default(now())
    Usuarios    UsuarioEnGrupo[]
    Actividad   Actividad[]
}

model Actividad {
    id               Int                     @id @default(autoincrement())
    descripcion      String?
    creadoEl         DateTime                @default(now())
    fechaVencimiento DateTime?
    grupoId          Int
    Grupo            Grupo                   @relation(fields: [grupoId], references: [id])
    Preguntas        Pregunta[]
    Calificaciones   CalificacionActividad[]
}

model CalificacionActividad {
    id           Int       @id @default(autoincrement())
    calificacion Float
    usuarioId    Int
    actividadId  Int
    Usuario      Usuario   @relation(fields: [usuarioId], references: [id])
    Actividad    Actividad @relation(fields: [actividadId], references: [id])

    @@unique([usuarioId, actividadId])
}

model Pregunta {
    id          Int    @id @default(autoincrement())
    pregunta    String
    respuesta   String
    intentos    Int?   @default(4)
    multimedia  Bytes?  @db.LongBlob
    observacion String?
    enlace      String?

    actividadId Int
    Actividad   Actividad @relation(fields: [actividadId], references: [id], onDelete: Cascade)

    Respuestas_Alumno RespuestasAlumno[]
}

model RespuestasAlumno {
    preguntaId      Int
    usuarioId       Int
    Usuario         Usuario  @relation(fields: [usuarioId], references: [id])
    Pregunta        Pregunta @relation(fields: [preguntaId], references: [id])
    respuestaAlumno String
    intentosAlumno  Int
    correcto        Boolean

    @@id([preguntaId, usuarioId])
}
