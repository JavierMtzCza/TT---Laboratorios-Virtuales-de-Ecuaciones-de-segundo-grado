generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Usuario {
    id               Int                       @id @default(autoincrement())
    nombre           String                    @db.VarChar(20)
    apellido_paterno String                    @db.VarChar(25)
    apellido_materno String                    @db.VarChar(25)
    correo           String                    @unique @db.VarChar(50)
    contrasena       String                    @db.VarChar(191)
    creadoEl         DateTime                  @default(now())
    estado           Boolean                   @default(true)
    Grupos           UsuarioEnGrupo[]
    Respuestas       RespuestasAlumno[]
    Calificaciones   CalificacionesActividad[]
    CambioContrasena CambioContrasena?
}

model CambioContrasena {
    id             Int       @id @default(autoincrement())
    usuarioId      Int       @unique
    codigo         String    @unique @db.VarChar(191)
    fechaCaducidad DateTime?
    estado         Boolean   @default(true)
    Usuario        Usuario   @relation(fields: [usuarioId], references: [id])
}

model Rol {
    id          Int              @id @default(autoincrement())
    nombre      String           @unique
    rolEnGrupos UsuarioEnGrupo[]
}

model UsuarioEnGrupo {
    usuarioId Int
    grupoId   Int
    rolId     Int
    Usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
    Grupo     Grupo   @relation(fields: [grupoId], references: [id], onDelete: Cascade)
    Rol       Rol     @relation(fields: [rolId], references: [id])

    @@id(fields: [usuarioId, grupoId])
}

model Grupo {
    id          Int              @id @default(autoincrement())
    nombre      String           @db.VarChar(50)
    descripcion String?
    clave       String           @unique
    creadoEl    DateTime         @default(now())
    Usuarios    UsuarioEnGrupo[]
    Actividad   Actividad[]
}

model Actividad {
    id             Int                       @id @default(autoincrement())
    descripcion    String?
    creadoEl       DateTime                  @default(now())
    fechaLimite    DateTime?
    grupoId        Int
    Grupo          Grupo                     @relation(fields: [grupoId], references: [id])
    Preguntas      Pregunta[]
    Calificaciones CalificacionesActividad[]
}

model CalificacionesActividad {
    calificacion Float
    usuarioId    Int
    actividadId  Int
    Usuario      Usuario   @relation(fields: [usuarioId], references: [id])
    Actividad    Actividad @relation(fields: [actividadId], references: [id])

    @@id([usuarioId, actividadId])
}

model Pregunta {
    id                    Int     @id @default(autoincrement())
    pregunta              String
    respuesta             String
    tipo                  String? // Tipo de pregunta: opción múltiple, verdadero/falso, respuesta corta, etc.
    intentos              Int?    @default(4)
    multimedia            Bytes?  @db.LongBlob // Datos binarios de la imagen
    descripcionMultimedia String? // Descripción de la imagen
    formatoMultimedia     String? // Formato de archivo de la imagen (por ejemplo, jpg, png, etc.)
    observacion           String?
    enlace                String?

    actividadId Int
    Actividad   Actividad @relation(fields: [actividadId], references: [id], onDelete: Cascade)

    Respuestas_Alumno RespuestasAlumno[]
    OpcionesPregunta  OpcionesPregunta[]

    @@unique([pregunta, actividadId])
}

model RespuestasAlumno {
    preguntaId      Int
    usuarioId       Int
    Usuario         Usuario  @relation(fields: [usuarioId], references: [id])
    Pregunta        Pregunta @relation(fields: [preguntaId], references: [id])
    respuestaAlumno String
    intentosAlumno  Int
    correcto        Boolean

    @@id([preguntaId, usuarioId])
}

model OpcionesPregunta {
    id          Int      @id @default(autoincrement())
    textoOpcion String
    multimedia  Bytes?   @db.LongBlob
    correcta    Boolean  @default(false)
    preguntaId  Int
    pregunta    Pregunta @relation(fields: [preguntaId], references: [id])
}

model Opciones {
    id         Int    @id @default(autoincrement())
    clave      String @unique
    valor      String
    multimedia Bytes? @db.LongBlob
}
